Data Structures (600.226)
Fall 2015, Section 1

# Project 4 - Memory Management #

README.txt

Contributors: 

* Marc Feldman	    *  mfeldm21	 *  mfeldm21@jhu.edu
* Anuj Mehndiratta  *  amehndi1	 *  amehndi1@jhu.edu
* Alex Owen	    *  aowen10	 *  aowen10@jhu.edu

—-----------------------------------------------------------------------------------------
To compile:	javac MemSimMain.java
To run:		java MemSimMain <filename>

Our files are organized as follows: The code is in src/, and the provided input files are
in inputFiles/ . So, to run with any of the given input files (if you wish to do so), type 
java MemSimMain ../inputFiles/testX.txt where x is the number 0, 1, or 3.

We provided the necessary files for Checkstyle and JUnit testing for your convenience.

To run checkstyle, navigate to src and copy and paste the following:

java -jar ../checkstyle-6.9-all.jar -c ../jhu_checks.xml AVLtree.java BaseManager.java MaxHeap.java Sorter.java WorstFit.java AddressComparator.java BestFit.java MemSimMain.java YourFit.java Block.java MemoryManager.java

To run the JUnit tests, navigate to src and use the following:

To compile tests: javac -cp ../junit-4.12.jar:.  TestMaxHeap.java TestWorstFit.java TestYourFit.java TestBestFit.java SorterTest.java AvlTreeTest.java

To run tests: java -cp ../junit-4.12.jar:../hamcrest-core-1.3.jar:. org.junit.runner.JUnitCore <filename>
—-----------------------------------------------------------------------------------------

We are using the provided Design plan for our project. 

BaseManager is a base class for WorstFit, BestFit, and YourFit. deallocate() and 
defragment() are mostly written in BaseManager, but then the fits extend these to deal with
their specific data structures (MaxHeap for WorstFit, AVLtree for BestFit, and ArrayList 
for YourFit).

YourFit: We use a FirstFit method for YourFit. We use an arraylist to store the free memory 
blocks, sorted by address. The first fit method iterates through this arraylist and 
allocates to the first block that the allocation request would fit in.

We initially were going to implement a hybrid of NextFit along with FirstFit but it is very 
fast without using NextFit so we did not implement it. The amount of memory we are dealing 
with means that the run time when iterating isn’t too slow, but this method still has O(N) 
time complexity, and if we were testing with much larger simulations, the slower run time 
might be noticed. However, the main perk of our fit is that we never have to sort the free 
memory, because when free memory is added, it is added into the spot as if it were already 
sorted. 

Our data differs from the provided translogs slightly. This is because we defragment() 
differently than the provided output. We keep track of the size of available free memory, 
and if the allocation request is larger than this amount, the allocate fails (without 
attempting to defragment()). This doesn’t change anything with the allocate fails, it just 
means we defrag fewer times (and get the same results).

Even though we divided the program parts between group members, most (if not all) of our 
coding was done in groups so pretty much all of our files had contributions from each group 
member.

As a reminder, this wasn’t on BlackBoard because we were granted a 24 hour extension.
